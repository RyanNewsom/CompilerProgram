import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by Ryan on 1/24/2016.
 * The Driver for the MAL Syntax Checker program. Here file's will be opened, the files scanned, with the log files being
 * outputted after error checking.
 */
public class Driver {
    private static StringBuilder logString;
    private static String mFileName;
    private static LogInfo mLogInfo;

    //Loop through the possible files
    //Open the current file
    //Look for any items to be stripped
    //Remove the items and output the new text to an output file
    public static void main(String [] args){
        File file = loadFile();
        readFile(file);
        outputFiles();
    }


    /**
     * Reads all the files and produces a string builder which will then be written to a new file
     */
    private static void readFile(File file){
        FileReader fileReader = new FileReader();
        mLogInfo = fileReader.parseFile(file);
    }

    /**
     * Outputs the new files with blank lines & comments removed
     */
    private static void outputFiles() {
        BufferedWriter output = null;
        logString = mLogInfo.getLogInfo();

        try {
            output = new BufferedWriter(new FileWriter(mFileName + ".log"));

            output.write(createLogFile(logString.toString()));
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (output != null) try {
                output.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static File loadFile(){
        File theFile;
        Scanner in = new Scanner(System.in);

        System.out.println("Enter the MAL files name, so that it may be checked for compilation errors.");
        mFileName = in.next();

        theFile = new File(mFileName  + ".mal");

        return theFile;
    }

    private static String createLogFile(String log){
        String dateString;
        String filePass = "File had no errors, file is valid";

        int ILL_FORMED_OPERAND = 0;
        int ILL_FORMED_LABEL = 0;
        int INVALID_INSTRUCTION = 0;
        int TOO_MANY_OPERANDS = 0;
        int TOO_FEW_OPERANDS = 0;
        int WRONG_OPERAND_TYPE = 0;
        int LABEL_NOT_USED = 0;
        int LABEL_DOESNT_EXIST = 0;

        ArrayList<Error> mErrors = mLogInfo.getErrors();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        dateString = dateFormat.format(date);
        for(int i = 0; i < mErrors.size(); i++){
            Error error = mErrors.get(i);
            if(error.getmErrorType() == ErrorType.ILL_FORMED_OPERAND){
                ILL_FORMED_OPERAND++;
            } else if(error.getmErrorType() == ErrorType.ILL_FORMED_LABEL){
                ILL_FORMED_LABEL++;
            }else if(error.getmErrorType() == ErrorType.INVALID_INSTRUCTION){
                INVALID_INSTRUCTION++;
            }else if(error.getmErrorType() == ErrorType.TOO_MANY_OPERANDS){
                TOO_MANY_OPERANDS++;
            }else if(error.getmErrorType() == ErrorType.TOO_FEW_OPERANDS){
                TOO_FEW_OPERANDS++;
            }else if(error.getmErrorType() == ErrorType.WRONG_OPERAND_TYPE){
                WRONG_OPERAND_TYPE++;
            }else if(error.getmErrorType() == ErrorType.LABEL_NOT_USED){
                LABEL_NOT_USED++;
            }else if(error.getmErrorType() == ErrorType.LABEL_DOESNT_EXIST){
                LABEL_DOESNT_EXIST++;
            }
        }
        if(mErrors.size() > 0){
            filePass = "Error's found, file is not valid";
        }
        String heading = "Log File for Mal Program: " + mFileName +"\n Generated by: Ryan Newsom \n CS3210 \n Date: " + dateString
                + "\n \n----------------------------------- \n";
        String suffix = "Total errors: " + mErrors.size() + "\n ";
        String errorString = getErrorAmountString(ErrorType.ILL_FORMED_OPERAND, ILL_FORMED_OPERAND) + getErrorAmountString(ErrorType.ILL_FORMED_LABEL, ILL_FORMED_LABEL)
                + getErrorAmountString(ErrorType.INVALID_INSTRUCTION, INVALID_INSTRUCTION) + getErrorAmountString(ErrorType.TOO_MANY_OPERANDS, TOO_MANY_OPERANDS)
                + getErrorAmountString(ErrorType.TOO_FEW_OPERANDS, TOO_FEW_OPERANDS) + getErrorAmountString(ErrorType.WRONG_OPERAND_TYPE, WRONG_OPERAND_TYPE)
                + getErrorAmountString(ErrorType.LABEL_NOT_USED, LABEL_NOT_USED) + getErrorAmountString(ErrorType.LABEL_DOESNT_EXIST, LABEL_DOESNT_EXIST);
        return heading + log + "\n" + suffix + errorString + "\n" + filePass;
    }

    private static String getErrorAmountString(ErrorType type, int amount){
        String errorString = "";

        if(amount > 0){
            errorString += amount + " " + type.toString() + "\n";
            return errorString;
        }

        return "";
    }

}
